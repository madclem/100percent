input createEventsInput {
  data: EventsInput
}

type createEventsPayload {
  event: Events
}

input createMilestoneiconsInput {
  data: MilestoneiconsInput
}

type createMilestoneiconsPayload {
  milestoneicon: Milestoneicons
}

input createMilestonesInput {
  data: MilestonesInput
}

type createMilestonesPayload {
  milestone: Milestones
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createPressInput {
  data: PressInput
}

type createPressPayload {
  press: Press
}

input createQuotesInput {
  data: QuotesInput
}

type createQuotesPayload {
  quote: Quotes
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSpeakersInput {
  data: SpeakersInput
}

type createSpeakersPayload {
  speaker: Speakers
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteEventsInput {
  where: InputID
}

type deleteEventsPayload {
  event: Events
}

input deleteMilestoneiconsInput {
  where: InputID
}

type deleteMilestoneiconsPayload {
  milestoneicon: Milestoneicons
}

input deleteMilestonesInput {
  where: InputID
}

type deleteMilestonesPayload {
  milestone: Milestones
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deletePressInput {
  where: InputID
}

type deletePressPayload {
  press: Press
}

input deleteQuotesInput {
  where: InputID
}

type deleteQuotesPayload {
  quote: Quotes
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSpeakersInput {
  where: InputID
}

type deleteSpeakersPayload {
  speaker: Speakers
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editEventsInput {
  date: DateTime
  title: String
  description: String
  photos: [ID]
  speakers: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editMilestoneiconsInput {
  name: String
  icon: ID
}

input editMilestonesInput {
  year: Int
  description: String
  milestoneicons: ID
}

input editPostInput {
  name: String
  content: String
  cover: ID
}

input editPressInput {
  title: String
  description: String
  link: String
  is_club_related: Boolean
}

input editQuotesInput {
  quote: String
  name: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSpeakersInput {
  photo: ID
  name: String
  description: String
  link: String
  events: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type Events {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  date: DateTime
  title: String
  description: String
  photos(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  speakers(sort: String, limit: Int, start: Int, where: JSON): [Speakers]
}

type EventsAggregator {
  count: Int
}

type EventsConnection {
  values: [Events]
  groupBy: EventsGroupBy
  aggregate: EventsAggregator
}

type EventsConnection_id {
  key: ID
  connection: EventsConnection
}

type EventsConnectionCreatedAt {
  key: DateTime
  connection: EventsConnection
}

type EventsConnectionDate {
  key: DateTime
  connection: EventsConnection
}

type EventsConnectionDescription {
  key: String
  connection: EventsConnection
}

type EventsConnectionTitle {
  key: String
  connection: EventsConnection
}

type EventsConnectionUpdatedAt {
  key: DateTime
  connection: EventsConnection
}

type EventsGroupBy {
  _id: [EventsConnection_id]
  createdAt: [EventsConnectionCreatedAt]
  updatedAt: [EventsConnectionUpdatedAt]
  date: [EventsConnectionDate]
  title: [EventsConnectionTitle]
  description: [EventsConnectionDescription]
}

input EventsInput {
  date: DateTime
  title: String
  description: String
  photos: [ID]
  speakers: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Milestoneicons {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  icon: UploadFile
}

type MilestoneiconsAggregator {
  count: Int
}

type MilestoneiconsConnection {
  values: [Milestoneicons]
  groupBy: MilestoneiconsGroupBy
  aggregate: MilestoneiconsAggregator
}

type MilestoneiconsConnection_id {
  key: ID
  connection: MilestoneiconsConnection
}

type MilestoneiconsConnectionCreatedAt {
  key: DateTime
  connection: MilestoneiconsConnection
}

type MilestoneiconsConnectionIcon {
  key: ID
  connection: MilestoneiconsConnection
}

type MilestoneiconsConnectionName {
  key: String
  connection: MilestoneiconsConnection
}

type MilestoneiconsConnectionUpdatedAt {
  key: DateTime
  connection: MilestoneiconsConnection
}

type MilestoneiconsGroupBy {
  _id: [MilestoneiconsConnection_id]
  createdAt: [MilestoneiconsConnectionCreatedAt]
  updatedAt: [MilestoneiconsConnectionUpdatedAt]
  name: [MilestoneiconsConnectionName]
  icon: [MilestoneiconsConnectionIcon]
}

input MilestoneiconsInput {
  name: String
  icon: ID
}

type Milestones {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: Int
  description: String
  milestoneicons: Milestoneicons
}

type MilestonesAggregator {
  count: Int
  sum: MilestonesAggregatorSum
  avg: MilestonesAggregatorAvg
  min: MilestonesAggregatorMin
  max: MilestonesAggregatorMax
}

type MilestonesAggregatorAvg {
  year: Float
}

type MilestonesAggregatorMax {
  year: Float
}

type MilestonesAggregatorMin {
  year: Float
}

type MilestonesAggregatorSum {
  year: Float
}

type MilestonesConnection {
  values: [Milestones]
  groupBy: MilestonesGroupBy
  aggregate: MilestonesAggregator
}

type MilestonesConnection_id {
  key: ID
  connection: MilestonesConnection
}

type MilestonesConnectionCreatedAt {
  key: DateTime
  connection: MilestonesConnection
}

type MilestonesConnectionDescription {
  key: String
  connection: MilestonesConnection
}

type MilestonesConnectionMilestoneicons {
  key: ID
  connection: MilestonesConnection
}

type MilestonesConnectionUpdatedAt {
  key: DateTime
  connection: MilestonesConnection
}

type MilestonesConnectionYear {
  key: Int
  connection: MilestonesConnection
}

type MilestonesGroupBy {
  _id: [MilestonesConnection_id]
  createdAt: [MilestonesConnectionCreatedAt]
  updatedAt: [MilestonesConnectionUpdatedAt]
  year: [MilestonesConnectionYear]
  description: [MilestonesConnectionDescription]
  milestoneicons: [MilestonesConnectionMilestoneicons]
}

input MilestonesInput {
  year: Int
  description: String
  milestoneicons: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Events | createEventsPayload | updateEventsPayload | deleteEventsPayload | EventsConnection | EventsAggregator | EventsGroupBy | EventsConnection_id | EventsConnectionCreatedAt | EventsConnectionUpdatedAt | EventsConnectionDate | EventsConnectionTitle | EventsConnectionDescription | Milestoneicons | createMilestoneiconsPayload | updateMilestoneiconsPayload | deleteMilestoneiconsPayload | MilestoneiconsConnection | MilestoneiconsAggregator | MilestoneiconsGroupBy | MilestoneiconsConnection_id | MilestoneiconsConnectionCreatedAt | MilestoneiconsConnectionUpdatedAt | MilestoneiconsConnectionName | MilestoneiconsConnectionIcon | Milestones | createMilestonesPayload | updateMilestonesPayload | deleteMilestonesPayload | MilestonesConnection | MilestonesAggregator | MilestonesAggregatorSum | MilestonesAggregatorAvg | MilestonesAggregatorMin | MilestonesAggregatorMax | MilestonesGroupBy | MilestonesConnection_id | MilestonesConnectionCreatedAt | MilestonesConnectionUpdatedAt | MilestonesConnectionYear | MilestonesConnectionDescription | MilestonesConnectionMilestoneicons | Post | createPostPayload | updatePostPayload | deletePostPayload | PostConnection | PostAggregator | PostGroupBy | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionName | PostConnectionContent | PostConnectionCover | Press | createPressPayload | updatePressPayload | deletePressPayload | PressConnection | PressAggregator | PressGroupBy | PressConnection_id | PressConnectionCreatedAt | PressConnectionUpdatedAt | PressConnectionTitle | PressConnectionDescription | PressConnectionLink | PressConnectionIs_club_related | Quotes | createQuotesPayload | updateQuotesPayload | deleteQuotesPayload | QuotesConnection | QuotesAggregator | QuotesGroupBy | QuotesConnection_id | QuotesConnectionCreatedAt | QuotesConnectionUpdatedAt | QuotesConnectionQuote | QuotesConnectionName | Speakers | createSpeakersPayload | updateSpeakersPayload | deleteSpeakersPayload | SpeakersConnection | SpeakersAggregator | SpeakersGroupBy | SpeakersConnection_id | SpeakersConnectionCreatedAt | SpeakersConnectionUpdatedAt | SpeakersConnectionPhoto | SpeakersConnectionName | SpeakersConnectionDescription | SpeakersConnectionLink | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createEvents(input: createEventsInput): createEventsPayload
  updateEvents(input: updateEventsInput): updateEventsPayload
  deleteEvents(input: deleteEventsInput): deleteEventsPayload
  createMilestoneicons(input: createMilestoneiconsInput): createMilestoneiconsPayload
  updateMilestoneicons(input: updateMilestoneiconsInput): updateMilestoneiconsPayload
  deleteMilestoneicons(input: deleteMilestoneiconsInput): deleteMilestoneiconsPayload
  createMilestones(input: createMilestonesInput): createMilestonesPayload
  updateMilestones(input: updateMilestonesInput): updateMilestonesPayload
  deleteMilestones(input: deleteMilestonesInput): deleteMilestonesPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createPress(input: createPressInput): createPressPayload
  updatePress(input: updatePressInput): updatePressPayload
  deletePress(input: deletePressInput): deletePressPayload
  createQuotes(input: createQuotesInput): createQuotesPayload
  updateQuotes(input: updateQuotesInput): updateQuotesPayload
  deleteQuotes(input: deleteQuotesInput): deleteQuotesPayload
  createSpeakers(input: createSpeakersInput): createSpeakersPayload
  updateSpeakers(input: updateSpeakersInput): updateSpeakersPayload
  deleteSpeakers(input: deleteSpeakersInput): deleteSpeakersPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Post {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  content: String
  cover: UploadFile
}

type PostAggregator {
  count: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnection_id {
  key: ID
  connection: PostConnection
}

type PostConnectionContent {
  key: String
  connection: PostConnection
}

type PostConnectionCover {
  key: ID
  connection: PostConnection
}

type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionName {
  key: String
  connection: PostConnection
}

type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}

type PostGroupBy {
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  name: [PostConnectionName]
  content: [PostConnectionContent]
  cover: [PostConnectionCover]
}

input PostInput {
  name: String
  content: String
  cover: ID
}

type Press {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  link: String
  is_club_related: Boolean
}

type PressAggregator {
  count: Int
}

type PressConnection {
  values: [Press]
  groupBy: PressGroupBy
  aggregate: PressAggregator
}

type PressConnection_id {
  key: ID
  connection: PressConnection
}

type PressConnectionCreatedAt {
  key: DateTime
  connection: PressConnection
}

type PressConnectionDescription {
  key: String
  connection: PressConnection
}

type PressConnectionIs_club_related {
  key: Boolean
  connection: PressConnection
}

type PressConnectionLink {
  key: String
  connection: PressConnection
}

type PressConnectionTitle {
  key: String
  connection: PressConnection
}

type PressConnectionUpdatedAt {
  key: DateTime
  connection: PressConnection
}

type PressGroupBy {
  _id: [PressConnection_id]
  createdAt: [PressConnectionCreatedAt]
  updatedAt: [PressConnectionUpdatedAt]
  title: [PressConnectionTitle]
  description: [PressConnectionDescription]
  link: [PressConnectionLink]
  is_club_related: [PressConnectionIs_club_related]
}

input PressInput {
  title: String
  description: String
  link: String
  is_club_related: Boolean
}

type Query {
  event(id: ID!): Events
  events(sort: String, limit: Int, start: Int, where: JSON): [Events]
  eventsConnection(sort: String, limit: Int, start: Int, where: JSON): EventsConnection
  milestoneicon(id: ID!): Milestoneicons
  milestoneicons(sort: String, limit: Int, start: Int, where: JSON): [Milestoneicons]
  milestoneiconsConnection(sort: String, limit: Int, start: Int, where: JSON): MilestoneiconsConnection
  milestone(id: ID!): Milestones
  milestones(sort: String, limit: Int, start: Int, where: JSON): [Milestones]
  milestonesConnection(sort: String, limit: Int, start: Int, where: JSON): MilestonesConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  press(id: ID!): Press
  presses(sort: String, limit: Int, start: Int, where: JSON): [Press]
  pressesConnection(sort: String, limit: Int, start: Int, where: JSON): PressConnection
  quote(id: ID!): Quotes
  quotes(sort: String, limit: Int, start: Int, where: JSON): [Quotes]
  quotesConnection(sort: String, limit: Int, start: Int, where: JSON): QuotesConnection
  speaker(id: ID!): Speakers
  speakers(sort: String, limit: Int, start: Int, where: JSON): [Speakers]
  speakersConnection(sort: String, limit: Int, start: Int, where: JSON): SpeakersConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Quotes {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quote: String
  name: String
}

type QuotesAggregator {
  count: Int
}

type QuotesConnection {
  values: [Quotes]
  groupBy: QuotesGroupBy
  aggregate: QuotesAggregator
}

type QuotesConnection_id {
  key: ID
  connection: QuotesConnection
}

type QuotesConnectionCreatedAt {
  key: DateTime
  connection: QuotesConnection
}

type QuotesConnectionName {
  key: String
  connection: QuotesConnection
}

type QuotesConnectionQuote {
  key: String
  connection: QuotesConnection
}

type QuotesConnectionUpdatedAt {
  key: DateTime
  connection: QuotesConnection
}

type QuotesGroupBy {
  _id: [QuotesConnection_id]
  createdAt: [QuotesConnectionCreatedAt]
  updatedAt: [QuotesConnectionUpdatedAt]
  quote: [QuotesConnectionQuote]
  name: [QuotesConnectionName]
}

input QuotesInput {
  quote: String
  name: String
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Speakers {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  photo: UploadFile
  name: String
  description: String
  link: String
  events(sort: String, limit: Int, start: Int, where: JSON): [Events]
}

type SpeakersAggregator {
  count: Int
}

type SpeakersConnection {
  values: [Speakers]
  groupBy: SpeakersGroupBy
  aggregate: SpeakersAggregator
}

type SpeakersConnection_id {
  key: ID
  connection: SpeakersConnection
}

type SpeakersConnectionCreatedAt {
  key: DateTime
  connection: SpeakersConnection
}

type SpeakersConnectionDescription {
  key: String
  connection: SpeakersConnection
}

type SpeakersConnectionLink {
  key: String
  connection: SpeakersConnection
}

type SpeakersConnectionName {
  key: String
  connection: SpeakersConnection
}

type SpeakersConnectionPhoto {
  key: ID
  connection: SpeakersConnection
}

type SpeakersConnectionUpdatedAt {
  key: DateTime
  connection: SpeakersConnection
}

type SpeakersGroupBy {
  _id: [SpeakersConnection_id]
  createdAt: [SpeakersConnectionCreatedAt]
  updatedAt: [SpeakersConnectionUpdatedAt]
  photo: [SpeakersConnectionPhoto]
  name: [SpeakersConnectionName]
  description: [SpeakersConnectionDescription]
  link: [SpeakersConnectionLink]
}

input SpeakersInput {
  photo: ID
  name: String
  description: String
  link: String
  events: [ID]
}

input updateEventsInput {
  where: InputID
  data: editEventsInput
}

type updateEventsPayload {
  event: Events
}

input updateMilestoneiconsInput {
  where: InputID
  data: editMilestoneiconsInput
}

type updateMilestoneiconsPayload {
  milestoneicon: Milestoneicons
}

input updateMilestonesInput {
  where: InputID
  data: editMilestonesInput
}

type updateMilestonesPayload {
  milestone: Milestones
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updatePressInput {
  where: InputID
  data: editPressInput
}

type updatePressPayload {
  press: Press
}

input updateQuotesInput {
  where: InputID
  data: editQuotesInput
}

type updateQuotesPayload {
  quote: Quotes
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSpeakersInput {
  where: InputID
  data: editSpeakersInput
}

type updateSpeakersPayload {
  speaker: Speakers
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
